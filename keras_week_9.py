# -*- coding: utf-8 -*-
"""Keras week 9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1h3wRM_LUxaqb5Nv0028pp1mQJYBuztML
"""

!pip install keras

import numpy as np
from keras.models import Sequential
from keras.layers import Dense

x_train_data = np.random.random((1000, 10))
y_train_data = np.random.randint(2, size=(1000, 1))

model = Sequential()
model.add(Dense(10, activation='relu', input_dim=10))
model.add(Dense(1, activation='sigmoid'))

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
model.fit(x_train_data, y_train_data, epochs=20, batch_size=10)

# Generate some dummy test data
x_test_data = np.random.random((100, 10))
y_test_data = np.random.randint(2, size=(100, 1))

# Evaluating the model on the test data
loss, accuracy = model.evaluate(x_test_data, y_test_data)
print('Test model loss:', loss)
print('Test model accuracy:', accuracy)

"""# Second Task"""

import pandas as pd
import numpy as np

data=pd.read_csv('/content/diabetes[1].csv')

data.head()

print("Number of rows:",data.shape[0])
print("Number of columns:",data.shape[1])
print("Number of patients with outcome 1:",data[data['Outcome']==1].shape[0])
print("Event Rate:", round(data.Outcome.mean()*100,2),"%")

data.describe()

from sklearn.model_selection import train_test_split

X=data.to_numpy()[:,0:8]
y=data.to_numpy()[:,8]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)
print (f'Shape of Train Data : {X_train.shape}')
print (f'Shape of Test Data : {X_test.shape}')

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
model=Sequential([Dense(24,input_dim=(8),activation='relu'),Dense(12,activation='relu'),Dense(1,activation='sigmoid')])

model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])
model.summary()

from __future__ import barry_as_FLUFL
history=model.fit(X_train,y_train,epochs=100,batch_size=32,verbose=1)

scores=model.evaluate(X_test,y_test)
print (f'{model.metrics_names[1]} : {round(scores[1]*100, 2)} %')

import matplotlib.pyplot as plt
plt.plot(history.history['loss'])
plt.title('Binary Cross Entropy Loss on Train dataset')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.show()

# Plotting accuracy metric
plt.plot(history.history['accuracy'])
plt.title('Accuracy on the train dataset')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.show()
#new line to check the git push
#checking branches of git
